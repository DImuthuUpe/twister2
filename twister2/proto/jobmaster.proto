syntax = "proto3";
package tws.proto.jobmaster;

import "job.proto";

option java_package = "edu.iu.dsc.tws.proto.jobmaster";
option java_outer_classname = "JobMasterAPI";

//*****************************************************
// a note:
// oneof structs are added to workerID fields
// main reason is to force the workerID to be encoded and logged when its value is zero.
// if we do not use oneof, the value zero is not logged.
// The reason for that seems to be that zero is the default value,
// and it is not encoded and transferred.
//
// an advantage of this solution is that each message must have workerID field set.
// that is positive I think.
//*****************************************************

// Ping message is sent by workers to the job master periodically
// it is to show that that the workers are running
message Ping {
    enum MessageType {
        WORKER_TO_MASTER = 0;
        MASTER_TO_WORKER = 1;
    }
    oneof idRequired {
        int32 workerID = 1;
    }
    oneof typeRequired {
        MessageType messageType = 2;
    }
    string pingMessage = 3;
}

// a worker can be any one of these states
enum WorkerState {
    STARTING = 0;
    RUNNING = 1;
    COMPLETED = 2;
    ERROR = 3;
    UNASSIGNED = 4;
}

message NodeInfo {
    string nodeIP = 1;
    string rackName = 2;
    string dataCenterName = 3;
}

//
// Information about a worker in a job
//
message WorkerInfo {
    oneof required {
        int32 workerID = 1;
    }
    string workerIP = 2;
    int32 port = 3;

    NodeInfo nodeInfo = 4;
    tws.proto.job.ComputeResource computeResource = 5;
    map<string, int32> additionalPort = 6;
}

// this message is sent when the worker is about to start
// it registers itself with the job master
// its status in job master becomes: STARTING when this message is received
message RegisterWorker {
    oneof idRequired {
        int32 workerID = 1;
    }
    WorkerInfo workerInfo = 2;
}

message RegisterWorkerResponse {
    oneof idRequired {
        int32 workerID = 1;
    }
    oneof resultRequired {
        bool result = 2;
    }
}

// a worker informs the master that its state has changed
// this message is not sent for STARTING state, it is covered by RegisterWorker message
// this message is sent for states: RUNNING and COMPLETED
// later on, we may add more states
message WorkerStateChange {
    oneof idRequired {
        int32 workerID = 1;
    }
    oneof stateRequired {
        WorkerState state = 2;
    }
}

// sent by the master to the worker
// to inform that its state change message has been received
message WorkerStateChangeResponse {
    oneof idRequired {
        int32 workerID = 1;
    }
    oneof stateRequired {
        WorkerState state = 2;
    }
}

// Get the list of wokers in a job from the job master
message ListWorkersRequest {
    enum RequestType {
        IMMEDIATE_RESPONSE = 0;
        RESPONSE_AFTER_ALL_JOINED = 1;
    }

    oneof idRequired {
        int32 workerID = 1;
    }
    oneof typeRequired {
        RequestType requestType = 2;
    }
}

// Job master returns the list of workers in a job to a worker
message ListWorkersResponse {

    oneof required {
        int32 workerID = 1;
    }
    repeated WorkerInfo worker = 2;
}

// All workers in a job wants to wait in a Barrier point
// When BarrierRequest message is received from all workers in the job,
// Job Master will send response messages to all
// previous request messages are quueed until the last request message is received
message BarrierRequest {
    oneof required{
        int32 workerID = 1;
    }
}

message BarrierResponse {
    oneof required {
        int32 workerID = 1;
    }
}

// Driver to Job Master communication related messages
// let the job master and the workers know that
// the number of workers in the job has hanged
// if change is positive, new workers added
// if change is negative, some worker instances removed
// numberOfWorkers shows the updated numberOfWorkers in the job
message WorkersScaled {
    oneof changeRequired {
        int32 change = 1;
    }
    oneof numberOfWorkersRequired {
        int32 numberOfWorkers = 2;
    }
}

// WorkersScaled response message
// if it fails, reason will have a string explaining the problem
message ScaledResponse {
    oneof required {
        bool succeeded = 1;
    }
    string reason = 2;
}

// Driver to worker broadcast message
// Driver can send any byte array to workers including serialized protocol buffer messages
// It is encoded as a byte array
message Broadcast {
    bytes data = 1;
    int32 numberOfWorkers = 3;
}

// Broadcast response message
// if it fails, reason will have a string explaining the problem
message BroadcastResponse {
    oneof required {
        bool succeeded = 1;
    }
    string reason = 2;
}

// Worker to Driver message
// Worker can send any byte array to the driver including serialized protocol buffer messages
message WorkerToDriver {
    bytes data = 1;
    oneof required {
        int32 workerID = 2;
    }

}

// WorkerToDriver response message
// if it fails, reason will have a string explaining the problem
message WorkerToDriverResponse {
    oneof required {
        bool succeeded = 1;
    }
    string reason = 2;
}

// Job master will send this message to all workers and the driver
// when all workers registered with the job
//
// it also sends this message to all workers and the driver
// when all new workers have joined after the scale up
message WorkersJoined {
    int32 numberOfWorkers = 2;
    repeated WorkerInfo worker = 3;
}
